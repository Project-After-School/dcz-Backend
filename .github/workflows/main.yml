name: Build and Deploy with Docker
#
on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/dcz-backend
  VERSION: ${{ github.sha }}
  NAME: dcz-backend
#
jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create env file
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ACCESS_TOKEN_EXPIRES_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRES_MINUTES }}
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "SECRET_KEY=$SECRET_KEY" >> .env
          echo "ACCESS_TOKEN_EXPIRES_MINUTES=$ACCESS_TOKEN_EXPIRES_MINUTES" >> .env
      

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DCZ_TOKEN }}

      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, label-dcz]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DCZ_TOKEN }}

      - name: Docker Run
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:80 \
            --name ${{ env.NAME }} \
            --restart always \
            --env-file .env \
            --log-opt max-size=10m \
            --log-opt max-file=3 \
            ${{ env.DOCKER_IMAGE }}:latest
